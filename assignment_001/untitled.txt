
#if 0
void bs(const int seq_len, const int two_power, float *a, uint32_t *b,
         sycl::nd_item<3> item_ct1) {

  int i = item_ct1.get_local_range().get(2) * item_ct1.get_group(2) +
          item_ct1.get_local_id(2);

  // Assign the bitonic sequence number.
  int seq_num = i / seq_len;

  // Variable used to identified the swapped element.
  int swapped_ele = -1;

  // Because the elements in the first half in the bitonic
  // sequence may swap with elements in the second half,
  // only the first half of elements in each sequence is
  // required (seq_len/2).
  int h_len = seq_len / 2;

  if (i < (seq_len * seq_num) + h_len) swapped_ele = i + h_len;

  // Check whether increasing or decreasing order.
  int odd = seq_num / two_power;

  // Boolean variable used to determine "increasing" or
  // "decreasing" order.
  bool increasing = ((odd % 2) == 0);

  // Swap the elements in the bitonic sequence if needed
  if (swapped_ele != -1) {
    if (((a[i] > a[swapped_ele]) && increasing) ||
	((a[i] < a[swapped_ele]) && !increasing)) {
      float temp = a[i];
      uint32_t temp2 = b[i];
      a[i] = a[swapped_ele];
      b[i] = b[swapped_ele];
      a[swapped_ele] = temp;
      b[swapped_ele] = temp2;
    }
  }
}

void ParallelBitonicSort(float data_gpu[], uint32_t index[], int n, queue q_ct1) {

    // n: the exponent used to set the array size. Array size = power(2, n)
  int size = sycl::pown((float)(2), n);

  // step from 0, 1, 2, ...., n-1
  for (int step = 0; step < n; step++) {
    // for each step s, stage goes s, s-1, ..., 0
    for (int stage = step; stage >= 0; stage--) {
      // In each state, construct a number (num_seq) of bitonic sequences of
      // size seq_len (2, 4, ...) num_seq stores the number of bitonic sequences
      // at each stage. seq_len stores the length of the bitonic sequence at
      // each stage.
      int seq_len = sycl::pown((float)(2), stage + 1);
#if DEBUG
      int num_seq = pow(2, (n - stage - 1));  // Used for debug purpose.
      std::cout << "step num:" << step << " stage num:" << stage
                << " num_seq:" << num_seq << "(" << seq_len << ") => ";
#endif
      // Constant used in the kernel: 2**(step-stage).
      int two_power = 1 << (step - stage);
      q_ct1.submit([&](sycl::handler &cgh) {
        cgh.parallel_for(
            sycl::nd_range<3>(sycl::range<3>(1, 1, size / BLOCK_SIZE) *
                                  sycl::range<3>(1, 1, BLOCK_SIZE),
                              sycl::range<3>(1, 1, BLOCK_SIZE)),
            [=](sycl::nd_item<3> item_ct1) {
              bs(seq_len, two_power, data_gpu, index, item_ct1);
            });
      });
      //dev_ct1.queues_wait_and_throw();
    }  // end stage
  }    // end step
  q_ct1.wait();
}

#endif

void swap(double* a, double* b)
{
    double t = *a;
    *a = *b;
    *b = t;
}

void swap(uint32_t* a, uint32_t* b)
{
    uint32_t t = *a;
    *a = *b;
    *b = t;
}

int partition(double arr[], uint32_t index[], int low, int high)
{
    double pivot = arr[high];    // pivot
    uint32_t i = (low - 1);  // Index of smaller element
 
    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
            swap(&index[i], &index[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    swap(&index[i + 1], &index[high]);
    return (i + 1);
}
 
void quickSort(double arr[], uint32_t index[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        int pi = partition(arr, index, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, index, low, pi - 1);
        quickSort(arr, index, pi + 1, high);
    }
}